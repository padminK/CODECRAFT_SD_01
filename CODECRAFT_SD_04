def print_grid(grid):
    """Print the Sudoku grid in a formatted way"""
    for i in range(9):
        if i % 3 == 0 and i != 0:
            print("- - - - - - - - - - - -")
        
        for j in range(9):
            if j % 3 == 0 and j != 0:
                print(" | ", end="")
            
            if j == 8:
                print(grid[i][j])
            else:
                print(str(grid[i][j]) + " ", end="")

def is_valid(grid, num, pos):
    """Check if placing num at pos is valid"""
    # Check row
    for i in range(len(grid[0])):
        if grid[pos[0]][i] == num and pos[1] != i:
            return False
    
    # Check column
    for i in range(len(grid)):
        if grid[i][pos[1]] == num and pos[0] != i:
            return False
    
    # Check 3x3 box
    box_x = pos[1] // 3
    box_y = pos[0] // 3
    
    for i in range(box_y * 3, box_y * 3 + 3):
        for j in range(box_x * 3, box_x * 3 + 3):
            if grid[i][j] == num and (i, j) != pos:
                return False
    
    return True

def find_empty(grid):
    """Find an empty cell in the grid"""
    for i in range(len(grid)):
        for j in range(len(grid[0])):
            if grid[i][j] == 0:
                return (i, j)  # row, col
    return None

def solve_sudoku(grid):
    """Solve the Sudoku puzzle using backtracking"""
    find = find_empty(grid)
    if not find:
        return True  # Puzzle solved
    else:
        row, col = find
    
    for num in range(1, 10):
        if is_valid(grid, num, (row, col)):
            grid[row][col] = num
            
            if solve_sudoku(grid):
                return True
            
            # Backtrack
            grid[row][col] = 0
    
    return False

def main():
    """Main function to run the Sudoku solver"""
    # Example unsolved Sudoku puzzle (0 represents empty cells)
    sudoku_grid = [
        [5, 3, 0, 0, 7, 0, 0, 0, 0],
        [6, 0, 0, 1, 9, 5, 0, 0, 0],
        [0, 9, 8, 0, 0, 0, 0, 6, 0],
        [8, 0, 0, 0, 6, 0, 0, 0, 3],
        [4, 0, 0, 8, 0, 3, 0, 0, 1],
        [7, 0, 0, 0, 2, 0, 0, 0, 6],
        [0, 6, 0, 0, 0, 0, 2, 8, 0],
        [0, 0, 0, 4, 1, 9, 0, 0, 5],
        [0, 0, 0, 0, 8, 0, 0, 7, 9]
    ]
    
    print("Unsolved Sudoku Puzzle:")
    print_grid(sudoku_grid)
    print("\nSolving...")
    
    if solve_sudoku(sudoku_grid):
        print("\nSolved Sudoku Puzzle:")
        print_grid(sudoku_grid)
    else:
        print("\nNo solution exists for this puzzle.")

# Alternative function to solve a custom puzzle
def solve_custom_puzzle(puzzle):
    """Solve a custom Sudoku puzzle"""
    print("Original puzzle:")
    print_grid(puzzle)
    
    # Create a copy to avoid modifying the original
    grid_copy = [row[:] for row in puzzle]
    
    if solve_sudoku(grid_copy):
        print("\nSolved puzzle:")
        print_grid(grid_copy)
        return grid_copy
    else:
        print("\nNo solution exists for this puzzle.")
        return None

if __name__ == "__main__":
    main()
    
    # Example of how to use with a different puzzle
    print("\n" + "="*50)
    print("Example with another puzzle:")
    
    another_puzzle = [
        [0, 0, 0, 6, 0, 0, 4, 0, 0],
        [7, 0, 0, 0, 0, 3, 6, 0, 0],
        [0, 0, 0, 0, 9, 1, 0, 8, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 5, 0, 1, 8, 0, 0, 0, 3],
        [0, 0, 0, 3, 0, 6, 0, 4, 5],
        [0, 4, 0, 2, 0, 0, 0, 6, 0],
        [9, 0, 3, 0, 0, 0, 0, 0, 0],
        [0, 2, 0, 0, 0, 0, 1, 0, 0]
    ]
    
    solve_custom_puzzle(another_puzzle)
